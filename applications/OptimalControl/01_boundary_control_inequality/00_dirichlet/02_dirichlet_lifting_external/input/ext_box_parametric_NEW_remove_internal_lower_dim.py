#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.8.0 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/home/gbornia/software/femus/applications/OptimalControl/01_boundary_control_inequality/00_dirichlet/02_dirichlet_lifting_external/input')

####################################################
##       Begin of NoteBook variables section      ##
####################################################
notebook.set("l_x", 1)
notebook.set("l_y", 1)
notebook.set("x_b", 0)
notebook.set("x_e", "x_b + l_x")
notebook.set("y_b", 0)
notebook.set("y_e", "y_b + l_y")
notebook.set("ext_l_x", 0.25)
notebook.set("ext_l_y", 0.5)
notebook.set("ext_x_b", "x_e")
notebook.set("ext_x_e", "ext_x_b + ext_l_x")
notebook.set("ext_y_b_delta_from_y_b", 0.25)
notebook.set("ext_y_b", "y_b + ext_y_b_delta_from_y_b")
notebook.set("ext_y_e", "ext_y_b + ext_l_y")
notebook.set("mesh_ext_n_x", 1)
notebook.set("mesh_ext_n_y", 2)
notebook.set("mesh_n_x", 2)
notebook.set("mesh_n_y_lower", 1)
notebook.set("mesh_n_y_center", "mesh_ext_n_y")
notebook.set("mesh_n_y_upper", 1)
####################################################
##        End of NoteBook variables section       ##
####################################################
###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Vertex_1 = geompy.MakeVertex("x_b", "y_b", 0)
Vertex_2 = geompy.MakeVertex("x_b", "y_e", 0)
Vertex_3 = geompy.MakeVertex("x_e", "y_b", 0)
Vertex_4 = geompy.MakeVertex("x_e", "y_e", 0)
Vertex_5 = geompy.MakeVertex("ext_x_b", "ext_y_b", 0)
Vertex_6 = geompy.MakeVertex("ext_x_b", "ext_y_e", 0)
Vertex_7 = geompy.MakeVertex("ext_x_e", "ext_y_b", 0)
Vertex_8 = geompy.MakeVertex("ext_x_e", "ext_y_e", 0)
Vertex_9 = geompy.MakeVertex("x_b", "ext_y_b", 0)
Vertex_10 = geompy.MakeVertex("x_b", "ext_y_e", 0)
Line_1 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_3)
Line_2 = geompy.MakeLineTwoPnt(Vertex_3, Vertex_4)
Line_3 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_2)
Line_4 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
Line_5 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_7)
Line_6 = geompy.MakeLineTwoPnt(Vertex_7, Vertex_8)
Line_7 = geompy.MakeLineTwoPnt(Vertex_8, Vertex_6)
Line_8 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_6)
Line_9 = geompy.MakeLineTwoPnt(Vertex_9, Vertex_5)
Line_10 = geompy.MakeLineTwoPnt(Vertex_10, Vertex_6)
Face_1 = geompy.MakeFaceWires([Line_1, Line_2, Line_3, Line_4], 1)
Face_2 = geompy.MakeFaceWires([Line_5, Line_6, Line_7, Line_8], 1)
Fuse_1 = geompy.MakeFuseList([Face_1, Face_2], True, True)
Partition_1 = geompy.MakePartition([Fuse_1], [Line_8, Line_9, Line_10], [], [], geompy.ShapeType["FACE"], 0, [], 0)
[Face_3,Face_4,Face_5,Face_6] = geompy.ExtractShapes(Partition_1, geompy.ShapeType["FACE"], True)
[Edge_1,Edge_2,Edge_3,Edge_4] = geompy.ExtractShapes(Face_3, geompy.ShapeType["EDGE"], True)
[Edge_5,Edge_6,Edge_7,Edge_8] = geompy.ExtractShapes(Face_4, geompy.ShapeType["EDGE"], True)
[Edge_9,Edge_10,Edge_11,Edge_12] = geompy.ExtractShapes(Face_5, geompy.ShapeType["EDGE"], True)
[Edge_13,Edge_14,Edge_15,Edge_16] = geompy.ExtractShapes(Face_6, geompy.ShapeType["EDGE"], True)
[Face_3, Face_4, Face_5, Face_6] = geompy.GetExistingSubObjects(Partition_1, False)
Auto_group_for_Group_12_0 = geompy.CreateGroup(Partition_1, geompy.ShapeType["FACE"])
geompy.UnionList(Auto_group_for_Group_12_0, [Face_3, Face_4, Face_5])
Auto_group_for_Group_1_0 = geompy.CreateGroup(Partition_1, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_Group_1_0, [Edge_1, Edge_5, Edge_9])
Auto_group_for_Group_2_0 = geompy.CreateGroup(Partition_1, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_Group_2_0, [Edge_4, Edge_12])
Auto_group_for_Group_5_0 = geompy.CreateGroup(Partition_1, geompy.ShapeType["EDGE"])
geompy.UnionList(Auto_group_for_Group_5_0, [Edge_14, Edge_15, Edge_16])
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_3, 'Vertex_3' )
geompy.addToStudy( Vertex_4, 'Vertex_4' )
geompy.addToStudy( Vertex_5, 'Vertex_5' )
geompy.addToStudy( Vertex_6, 'Vertex_6' )
geompy.addToStudy( Vertex_7, 'Vertex_7' )
geompy.addToStudy( Vertex_8, 'Vertex_8' )
geompy.addToStudy( Vertex_9, 'Vertex_9' )
geompy.addToStudy( Vertex_10, 'Vertex_10' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( Line_2, 'Line_2' )
geompy.addToStudy( Line_3, 'Line_3' )
geompy.addToStudy( Line_4, 'Line_4' )
geompy.addToStudy( Line_5, 'Line_5' )
geompy.addToStudy( Line_6, 'Line_6' )
geompy.addToStudy( Line_7, 'Line_7' )
geompy.addToStudy( Line_8, 'Line_8' )
geompy.addToStudy( Line_9, 'Line_9' )
geompy.addToStudy( Line_10, 'Line_10' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudy( Face_2, 'Face_2' )
geompy.addToStudy( Fuse_1, 'Fuse_1' )
geompy.addToStudy( Partition_1, 'Partition_1' )
geompy.addToStudyInFather( Partition_1, Face_3, 'Face_3' )
geompy.addToStudyInFather( Partition_1, Face_4, 'Face_4' )
geompy.addToStudyInFather( Partition_1, Face_5, 'Face_5' )
geompy.addToStudyInFather( Partition_1, Face_6, 'Face_6' )
geompy.addToStudyInFather( Face_3, Edge_1, 'Edge_1' )
geompy.addToStudyInFather( Face_3, Edge_2, 'Edge_2' )
geompy.addToStudyInFather( Face_3, Edge_3, 'Edge_3' )
geompy.addToStudyInFather( Face_3, Edge_4, 'Edge_4' )
geompy.addToStudyInFather( Face_4, Edge_5, 'Edge_5' )
geompy.addToStudyInFather( Face_4, Edge_6, 'Edge_6' )
geompy.addToStudyInFather( Face_4, Edge_7, 'Edge_7' )
geompy.addToStudyInFather( Face_4, Edge_8, 'Edge_8' )
geompy.addToStudyInFather( Face_5, Edge_9, 'Edge_9' )
geompy.addToStudyInFather( Face_5, Edge_10, 'Edge_10' )
geompy.addToStudyInFather( Face_5, Edge_11, 'Edge_11' )
geompy.addToStudyInFather( Face_5, Edge_12, 'Edge_12' )
geompy.addToStudyInFather( Face_6, Edge_13, 'Edge_13' )
geompy.addToStudyInFather( Face_6, Edge_14, 'Edge_14' )
geompy.addToStudyInFather( Face_6, Edge_15, 'Edge_15' )
geompy.addToStudyInFather( Face_6, Edge_16, 'Edge_16' )
geompy.addToStudyInFather( Partition_1, Auto_group_for_Group_12_0, 'Auto_group_for_Group_12_0' )
geompy.addToStudyInFather( Partition_1, Auto_group_for_Group_1_0, 'Auto_group_for_Group_1_0' )
geompy.addToStudyInFather( Partition_1, Auto_group_for_Group_2_0, 'Auto_group_for_Group_2_0' )
geompy.addToStudyInFather( Partition_1, Auto_group_for_Group_5_0, 'Auto_group_for_Group_5_0' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
#smesh.SetEnablePublish( False ) # Set to False to avoid publish in study if not needed or in some particular situations:
                                 # multiples meshes built in parallel, complex and numerous mesh edition (performance)

Mesh_1 = smesh.Mesh(Partition_1)
Quadrangle_2D = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Face_3_1 = Mesh_1.GroupOnGeom(Face_3,'Face_3',SMESH.FACE)
Face_4_1 = Mesh_1.GroupOnGeom(Face_4,'Face_4',SMESH.FACE)
Face_5_1 = Mesh_1.GroupOnGeom(Face_5,'Face_5',SMESH.FACE)
Face_6_1 = Mesh_1.GroupOnGeom(Face_6,'Face_6',SMESH.FACE)
Number_of_Segments_1 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_1.SetNumberOfSegments( "mesh_n_y_lower" )
Number_of_Segments_2 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_2.SetNumberOfSegments( "mesh_n_x" )
Number_of_Segments_3 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_3.SetNumberOfSegments( "mesh_n_y_center" )
Regular_1D = Mesh_1.Segment(geom=Edge_9)
Number_of_Segments_4 = Regular_1D.NumberOfSegments("mesh_n_y_upper",None,[])
Regular_1D_1 = Mesh_1.Segment(geom=Edge_14)
Number_of_Segments_5 = Regular_1D_1.NumberOfSegments("mesh_ext_n_x",None,[])
Propagation_of_1D_Hyp = Regular_1D.Propagation()
status = Mesh_1.AddHypothesis(Propagation_of_1D_Hyp,Edge_14)
Regular_1D_2 = Mesh_1.Segment(geom=Edge_1)
Number_of_Segments_6 = Regular_1D_2.NumberOfSegments("mesh_n_y_lower",None,[])
Regular_1D_3 = Mesh_1.Segment(geom=Edge_5)
Number_of_Segments_7 = Regular_1D_3.NumberOfSegments("mesh_n_y_center",None,[])
Regular_1D_4 = Mesh_1.Segment(geom=Edge_2)
Number_of_Segments_8 = Regular_1D_4.NumberOfSegments("mesh_n_x",None,[])
status = Mesh_1.AddHypothesis(Propagation_of_1D_Hyp,Edge_1)
status = Mesh_1.AddHypothesis(Propagation_of_1D_Hyp,Edge_5)
status = Mesh_1.AddHypothesis(Propagation_of_1D_Hyp,Edge_2)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1 ] = Mesh_1.GetGroups()
Regular_1D_5 = Mesh_1.Segment()
isDone = Mesh_1.Compute()
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1 ] = Mesh_1.GetGroups()
Mesh_1.ConvertToQuadratic(0, Mesh_1,True)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1 ] = Mesh_1.GetGroups()
Group_12_0 = Mesh_1.GroupOnGeom(Auto_group_for_Group_12_0,'Group_12_0',SMESH.FACE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0 ] = Mesh_1.GetGroups()
Group_13_0 = Mesh_1.GroupOnGeom(Face_6,'Group_13_0',SMESH.FACE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0 ] = Mesh_1.GetGroups()
Group_1_0 = Mesh_1.GroupOnGeom(Auto_group_for_Group_1_0,'Group_1_0',SMESH.EDGE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0 ] = Mesh_1.GetGroups()
Group_2_0 = Mesh_1.GroupOnGeom(Auto_group_for_Group_2_0,'Group_2_0',SMESH.EDGE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0, Group_2_0 ] = Mesh_1.GetGroups()
Group_3_0 = Mesh_1.GroupOnGeom(Edge_2,'Group_3_0',SMESH.EDGE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0, Group_2_0, Group_3_0 ] = Mesh_1.GetGroups()
Group_5_0 = Mesh_1.GroupOnGeom(Auto_group_for_Group_5_0,'Group_5_0',SMESH.EDGE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0, Group_2_0, Group_3_0, Group_5_0 ] = Mesh_1.GetGroups()
Group_4_0 = Mesh_1.GroupOnGeom(Edge_11,'Group_4_0',SMESH.EDGE)
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0, Group_2_0, Group_3_0, Group_5_0, Group_4_0 ] = Mesh_1.GetGroups()
aCriteria = []
aCriterion = smesh.GetCriterion(SMESH.EDGE,SMESH.FT_FreeBorders,SMESH.FT_Undefined,0,SMESH.FT_LogicalNOT)
aCriteria.append(aCriterion)
aFilter_1 = smesh.GetFilterFromCriteria(aCriteria)
aFilter_1.SetMesh(Mesh_1.GetMesh())
Internal_lower_dim_elements = Mesh_1.GroupOnFilter( SMESH.EDGE, 'Internal_lower_dim_elements', aFilter_1 )
[ Face_3_1, Face_4_1, Face_5_1, Face_6_1, Group_12_0, Group_13_0, Group_1_0, Group_2_0, Group_3_0, Group_5_0, Group_4_0, Internal_lower_dim_elements ] = Mesh_1.GetGroups()
Sub_mesh_1 = Regular_1D.GetSubMesh()
Sub_mesh_2 = Regular_1D_1.GetSubMesh()
Sub_mesh_3 = Regular_1D_2.GetSubMesh()
Sub_mesh_4 = Regular_1D_3.GetSubMesh()
Sub_mesh_5 = Regular_1D_4.GetSubMesh()


## Set names of Mesh objects
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Number_of_Segments_2, 'Number of Segments_2')
smesh.SetName(Number_of_Segments_3, 'Number of Segments_3')
smesh.SetName(Number_of_Segments_1, 'Number of Segments_1')
smesh.SetName(Propagation_of_1D_Hyp, 'Propagation of 1D Hyp. on Opposite Edges_1')
smesh.SetName(Number_of_Segments_6, 'Number of Segments_6')
smesh.SetName(Number_of_Segments_4, 'Number of Segments_4')
smesh.SetName(Face_3_1, 'Face_3')
smesh.SetName(Number_of_Segments_5, 'Number of Segments_5')
smesh.SetName(Face_4_1, 'Face_4')
smesh.SetName(Face_5_1, 'Face_5')
smesh.SetName(Face_6_1, 'Face_6')
smesh.SetName(Group_12_0, 'Group_12_0')
smesh.SetName(Number_of_Segments_7, 'Number of Segments_7')
smesh.SetName(Group_13_0, 'Group_13_0')
smesh.SetName(Number_of_Segments_8, 'Number of Segments_8')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(Group_1_0, 'Group_1_0')
smesh.SetName(Group_3_0, 'Group_3_0')
smesh.SetName(Group_2_0, 'Group_2_0')
smesh.SetName(Group_4_0, 'Group_4_0')
smesh.SetName(Group_5_0, 'Group_5_0')
smesh.SetName(Sub_mesh_5, 'Sub-mesh_5')
smesh.SetName(Internal_lower_dim_elements, 'Internal_lower_dim_elements')
smesh.SetName(Sub_mesh_4, 'Sub-mesh_4')
smesh.SetName(Sub_mesh_3, 'Sub-mesh_3')
smesh.SetName(Sub_mesh_2, 'Sub-mesh_2')
smesh.SetName(Sub_mesh_1, 'Sub-mesh_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
