#!/usr/bin/env python

###
### This file is generated automatically by SALOME v9.2.1 with dump python functionality
###

import sys
import salome

salome.salome_init()
import salome_notebook
notebook = salome_notebook.NoteBook()
sys.path.insert(0, r'/home/gbornia/software/femus/applications/OptimalControl/boundary_control_inequality/dirichlet/dirichlet_lifting_external/input')

###
### GEOM component
###

import GEOM
from salome.geom import geomBuilder
import math
import SALOMEDS


geompy = geomBuilder.New()

geomObj_1 = geompy.MakeVertex(0, 0, 0)
geomObj_2 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_3 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_4 = geompy.MakeVectorDXDYDZ(0, 0, 1)
geomObj_5 = geompy.MakeVertex(0, 0, 0)
geomObj_6 = geompy.MakeVertex(1, 0, 0)
geomObj_7 = geompy.MakeVertex(0, 1, 0)
geomObj_8 = geompy.MakeVertex(1, 1, 0)
geomObj_9 = geompy.MakeVertex(1, 0.25, 0)
geomObj_10 = geompy.MakeVertex(1, 0.75, 0)
geomObj_11 = geompy.MakeVertex(1.25, 0.25, 0)
geomObj_12 = geompy.MakeVertex(1.25, 0.75, 0)
geomObj_13 = geompy.MakeLineTwoPnt(geomObj_5, geomObj_6)
geomObj_14 = geompy.MakeLineTwoPnt(geomObj_6, geomObj_8)
geomObj_15 = geompy.MakeLineTwoPnt(geomObj_8, geomObj_7)
geomObj_16 = geompy.MakeLineTwoPnt(geomObj_7, geomObj_5)
geomObj_17 = geompy.MakeLineTwoPnt(geomObj_9, geomObj_11)
geomObj_18 = geompy.MakeLineTwoPnt(geomObj_12, geomObj_11)
geomObj_19 = geompy.MakeLineTwoPnt(geomObj_12, geomObj_10)
geomObj_20 = geompy.MakeLineTwoPnt(geomObj_10, geomObj_9)
geomObj_21 = geompy.MakeFaceWires([geomObj_13, geomObj_14, geomObj_15, geomObj_16], 1)
[geomObj_22,geomObj_23,geomObj_24,geomObj_25] = geompy.ExtractShapes(geomObj_21, geompy.ShapeType["EDGE"], True)
geomObj_26 = geompy.MakeFaceWires([geomObj_17, geomObj_18, geomObj_19, geomObj_20], 1)
[geomObj_27,geomObj_28,geomObj_29,geomObj_30] = geompy.ExtractShapes(geomObj_26, geompy.ShapeType["EDGE"], True)
geomObj_31 = geompy.MakeVertex(0, 0, 0)
geomObj_32 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_33 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_34 = geompy.MakeVectorDXDYDZ(0, 0, 1)
geomObj_35 = geompy.MakeVertex(0, 0, 0)
geomObj_36 = geompy.MakeVertex(1, 0, 0)
geomObj_37 = geompy.MakeVertex(0, 1, 0)
geomObj_38 = geompy.MakeVertex(1, 1, 0)
geomObj_39 = geompy.MakeVertex(1, 0.25, 0)
geomObj_40 = geompy.MakeVertex(1, 0.75, 0)
geomObj_41 = geompy.MakeVertex(1.25, 0.25, 0)
geomObj_42 = geompy.MakeVertex(1.25, 0.75, 0)
geomObj_43 = geompy.MakeLineTwoPnt(geomObj_35, geomObj_36)
geomObj_44 = geompy.MakeLineTwoPnt(geomObj_36, geomObj_38)
geomObj_45 = geompy.MakeLineTwoPnt(geomObj_38, geomObj_37)
geomObj_46 = geompy.MakeLineTwoPnt(geomObj_37, geomObj_35)
geomObj_47 = geompy.MakeLineTwoPnt(geomObj_39, geomObj_41)
geomObj_48 = geompy.MakeLineTwoPnt(geomObj_42, geomObj_41)
geomObj_49 = geompy.MakeLineTwoPnt(geomObj_42, geomObj_40)
geomObj_50 = geompy.MakeLineTwoPnt(geomObj_40, geomObj_39)
geomObj_51 = geompy.MakeFaceWires([geomObj_43, geomObj_44, geomObj_45, geomObj_46], 1)
[geomObj_52,geomObj_53,geomObj_54,geomObj_55] = geompy.ExtractShapes(geomObj_51, geompy.ShapeType["EDGE"], True)
geomObj_56 = geompy.MakeFaceWires([geomObj_47, geomObj_48, geomObj_49, geomObj_50], 1)
[geomObj_57,geomObj_58,geomObj_59,geomObj_60] = geompy.ExtractShapes(geomObj_56, geompy.ShapeType["EDGE"], True)
geomObj_61 = geompy.MakeVertex(0, 0, 0)
geomObj_62 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_63 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_64 = geompy.MakeVectorDXDYDZ(0, 0, 1)
geomObj_65 = geompy.MakeVertex(0, 0, 0)
geomObj_66 = geompy.MakeVertex(1, 0, 0)
geomObj_67 = geompy.MakeVertex(0, 1, 0)
geomObj_68 = geompy.MakeVertex(1, 1, 0)
geomObj_69 = geompy.MakeVertex(1, 0, 0)
geomObj_70 = geompy.MakeVertex(1, 1, 0)
geomObj_71 = geompy.MakeVertex(1.25, 0, 0)
geomObj_72 = geompy.MakeVertex(1.25, 1, 0)
geomObj_73 = geompy.MakeLineTwoPnt(geomObj_65, geomObj_66)
geomObj_74 = geompy.MakeLineTwoPnt(geomObj_66, geomObj_68)
geomObj_75 = geompy.MakeLineTwoPnt(geomObj_68, geomObj_67)
geomObj_76 = geompy.MakeLineTwoPnt(geomObj_67, geomObj_65)
geomObj_77 = geompy.MakeLineTwoPnt(geomObj_69, geomObj_71)
geomObj_78 = geompy.MakeLineTwoPnt(geomObj_72, geomObj_71)
geomObj_79 = geompy.MakeLineTwoPnt(geomObj_72, geomObj_70)
geomObj_80 = geompy.MakeLineTwoPnt(geomObj_70, geomObj_69)
geomObj_81 = geompy.MakeFaceWires([geomObj_73, geomObj_74, geomObj_75, geomObj_76], 1)
[geomObj_82,geomObj_83,geomObj_84,geomObj_85] = geompy.ExtractShapes(geomObj_81, geompy.ShapeType["EDGE"], True)
geomObj_86 = geompy.MakeFaceWires([geomObj_77, geomObj_78, geomObj_79, geomObj_80], 1)
[geomObj_87,geomObj_88,geomObj_89,geomObj_90] = geompy.ExtractShapes(geomObj_86, geompy.ShapeType["EDGE"], True)
geomObj_91 = geompy.MakeVertex(0, 0, 0)
geomObj_92 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_93 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_94 = geompy.MakeVectorDXDYDZ(0, 0, 1)
geomObj_95 = geompy.MakeVertex(0, 0, 0)
geomObj_96 = geompy.MakeVertex(1, 0, 0)
geomObj_97 = geompy.MakeVertex(0, 1, 0)
geomObj_98 = geompy.MakeVertex(1, 1, 0)
geomObj_99 = geompy.MakeVertex(1, 0, 0)
geomObj_100 = geompy.MakeVertex(1, 1, 0)
geomObj_101 = geompy.MakeVertex(1.25, 0, 0)
geomObj_102 = geompy.MakeVertex(1.25, 1, 0)
geomObj_103 = geompy.MakeLineTwoPnt(geomObj_95, geomObj_96)
geomObj_104 = geompy.MakeLineTwoPnt(geomObj_96, geomObj_98)
geomObj_105 = geompy.MakeLineTwoPnt(geomObj_98, geomObj_97)
geomObj_106 = geompy.MakeLineTwoPnt(geomObj_97, geomObj_95)
geomObj_107 = geompy.MakeLineTwoPnt(geomObj_99, geomObj_101)
geomObj_108 = geompy.MakeLineTwoPnt(geomObj_102, geomObj_101)
geomObj_109 = geompy.MakeLineTwoPnt(geomObj_102, geomObj_100)
geomObj_110 = geompy.MakeLineTwoPnt(geomObj_100, geomObj_99)
geomObj_111 = geompy.MakeFaceWires([geomObj_103, geomObj_104, geomObj_105, geomObj_106], 1)
[geomObj_112,geomObj_113,geomObj_114,geomObj_115] = geompy.ExtractShapes(geomObj_111, geompy.ShapeType["EDGE"], True)
geomObj_116 = geompy.MakeFaceWires([geomObj_107, geomObj_108, geomObj_109, geomObj_110], 1)
[geomObj_117,geomObj_118,geomObj_119,geomObj_120] = geompy.ExtractShapes(geomObj_116, geompy.ShapeType["EDGE"], True)
geomObj_121 = geompy.MakeVertex(0, 0, 0)
geomObj_122 = geompy.MakeVectorDXDYDZ(1, 0, 0)
geomObj_123 = geompy.MakeVectorDXDYDZ(0, 1, 0)
geomObj_124 = geompy.MakeVectorDXDYDZ(0, 0, 1)
geomObj_125 = geompy.MakeVertex(0, 0, 0)
geomObj_126 = geompy.MakeVertex(1, 0, 0)
geomObj_127 = geompy.MakeVertex(0, 1, 0)
geomObj_128 = geompy.MakeVertex(1, 1, 0)
geomObj_129 = geompy.MakeVertex(1, 0, 0)
geomObj_130 = geompy.MakeVertex(1, 1, 0)
geomObj_131 = geompy.MakeVertex(1.25, 0, 0)
geomObj_132 = geompy.MakeVertex(1.25, 1, 0)
geomObj_133 = geompy.MakeLineTwoPnt(geomObj_125, geomObj_126)
geomObj_134 = geompy.MakeLineTwoPnt(geomObj_126, geomObj_128)
geomObj_135 = geompy.MakeLineTwoPnt(geomObj_128, geomObj_127)
geomObj_136 = geompy.MakeLineTwoPnt(geomObj_127, geomObj_125)
geomObj_137 = geompy.MakeLineTwoPnt(geomObj_129, geomObj_131)
geomObj_138 = geompy.MakeLineTwoPnt(geomObj_132, geomObj_131)
geomObj_139 = geompy.MakeLineTwoPnt(geomObj_132, geomObj_130)
geomObj_140 = geompy.MakeLineTwoPnt(geomObj_130, geomObj_129)
geomObj_141 = geompy.MakeFaceWires([geomObj_133, geomObj_134, geomObj_135, geomObj_136], 1)
[geomObj_142,geomObj_143,geomObj_144,geomObj_145] = geompy.ExtractShapes(geomObj_141, geompy.ShapeType["EDGE"], True)
geomObj_146 = geompy.MakeFaceWires([geomObj_137, geomObj_138, geomObj_139, geomObj_140], 1)
[geomObj_147,geomObj_148,geomObj_149,geomObj_150] = geompy.ExtractShapes(geomObj_146, geompy.ShapeType["EDGE"], True)
O = geompy.MakeVertex(0, 0, 0)
OX = geompy.MakeVectorDXDYDZ(1, 0, 0)
OY = geompy.MakeVectorDXDYDZ(0, 1, 0)
OZ = geompy.MakeVectorDXDYDZ(0, 0, 1)
Vertex_1 = geompy.MakeVertex(0, 0, 0)
Vertex_2 = geompy.MakeVertex(1, 0, 0)
Vertex_3 = geompy.MakeVertex(0, 1, 0)
Vertex_4 = geompy.MakeVertex(1, 1, 0)
Vertex_5 = geompy.MakeVertex(1, 0, 0)
Vertex_6 = geompy.MakeVertex(1, 1, 0)
Vertex_7 = geompy.MakeVertex(1.25, 0, 0)
Vertex_8 = geompy.MakeVertex(1.25, 1, 0)
Line_1 = geompy.MakeLineTwoPnt(Vertex_1, Vertex_2)
Line_2 = geompy.MakeLineTwoPnt(Vertex_2, Vertex_4)
Line_3 = geompy.MakeLineTwoPnt(Vertex_4, Vertex_3)
Line_4 = geompy.MakeLineTwoPnt(Vertex_3, Vertex_1)
Line_5 = geompy.MakeLineTwoPnt(Vertex_5, Vertex_7)
Line_6 = geompy.MakeLineTwoPnt(Vertex_8, Vertex_7)
Line_7 = geompy.MakeLineTwoPnt(Vertex_8, Vertex_6)
Line_8 = geompy.MakeLineTwoPnt(Vertex_6, Vertex_5)
Face_1 = geompy.MakeFaceWires([Line_1, Line_2, Line_3, Line_4], 1)
[Edge_1,Edge_2,Edge_3,Edge_4] = geompy.ExtractShapes(Face_1, geompy.ShapeType["EDGE"], True)
Face_2 = geompy.MakeFaceWires([Line_5, Line_6, Line_7, Line_8], 1)
[Edge_5,Edge_6,Edge_7,Edge_8] = geompy.ExtractShapes(Face_2, geompy.ShapeType["EDGE"], True)
geompy.addToStudy( O, 'O' )
geompy.addToStudy( OX, 'OX' )
geompy.addToStudy( OY, 'OY' )
geompy.addToStudy( OZ, 'OZ' )
geompy.addToStudy( Vertex_1, 'Vertex_1' )
geompy.addToStudy( Vertex_2, 'Vertex_2' )
geompy.addToStudy( Vertex_3, 'Vertex_3' )
geompy.addToStudy( Vertex_4, 'Vertex_4' )
geompy.addToStudy( Vertex_5, 'Vertex_5' )
geompy.addToStudy( Vertex_6, 'Vertex_6' )
geompy.addToStudy( Vertex_7, 'Vertex_7' )
geompy.addToStudy( Vertex_8, 'Vertex_8' )
geompy.addToStudy( Line_1, 'Line_1' )
geompy.addToStudy( Line_2, 'Line_2' )
geompy.addToStudy( Line_3, 'Line_3' )
geompy.addToStudy( Line_4, 'Line_4' )
geompy.addToStudy( Line_5, 'Line_5' )
geompy.addToStudy( Line_6, 'Line_6' )
geompy.addToStudy( Line_7, 'Line_7' )
geompy.addToStudy( Line_8, 'Line_8' )
geompy.addToStudy( Face_1, 'Face_1' )
geompy.addToStudyInFather( Face_1, Edge_1, 'Edge_1' )
geompy.addToStudyInFather( Face_1, Edge_2, 'Edge_2' )
geompy.addToStudyInFather( Face_1, Edge_3, 'Edge_3' )
geompy.addToStudyInFather( Face_1, Edge_4, 'Edge_4' )
geompy.addToStudy( Face_2, 'Face_2' )
geompy.addToStudyInFather( Face_2, Edge_5, 'Edge_5' )
geompy.addToStudyInFather( Face_2, Edge_6, 'Edge_6' )
geompy.addToStudyInFather( Face_2, Edge_7, 'Edge_7' )
geompy.addToStudyInFather( Face_2, Edge_8, 'Edge_8' )

###
### SMESH component
###

import  SMESH, SALOMEDS
from salome.smesh import smeshBuilder

smesh = smeshBuilder.New()
Mesh_1 = smesh.Mesh(Face_1)
Regular_1D = Mesh_1.Segment(geom=Edge_1)
Number_of_Segments_1 = Regular_1D.NumberOfSegments(4,None,[])
Propagation_of_1D_Hyp = Regular_1D.Propagation()
Number_of_Segments_2 = smesh.CreateHypothesis('NumberOfSegments')
Number_of_Segments_2.SetReversedEdges( [] )
Number_of_Segments_2.SetObjectEntry( "Face_1" )
Quadrangle_2D = Mesh_1.Quadrangle(algo=smeshBuilder.QUADRANGLE)
Regular_1D_1 = Mesh_1.Segment()
Number_of_Segments_3 = Regular_1D_1.NumberOfSegments(4,None,[])
Number_of_Segments_2.SetNumberOfSegments( 4 )
isDone = Mesh_1.Compute()
Mesh_2 = smesh.Mesh(Face_2)
Regular_1D_2 = Mesh_2.Segment(geom=Edge_5)
Number_of_Segments_4 = Regular_1D_2.NumberOfSegments(2,None,[])
Regular_1D_3 = Mesh_2.Segment()
Number_of_Segments_5 = Regular_1D_3.NumberOfSegments(1,None,[])
Quadrangle_2D_1 = Mesh_2.Quadrangle(algo=smeshBuilder.QUADRANGLE)
status = Mesh_2.AddHypothesis(Propagation_of_1D_Hyp,Edge_5)
isDone = Mesh_2.Compute()
Mesh_1.ConvertToQuadratic(0, Mesh_1,True)
Mesh_2.ConvertToQuadratic(0, Mesh_2,True)
isDone = Mesh_1.Compute()
isDone = Mesh_2.Compute()
Mesh_4 = smesh.Concatenate([ Mesh_1.GetMesh(), Mesh_2.GetMesh() ], 1, 1, 1e-05)
isDone = Mesh_4.RemoveElements( [ 6, 7 ] )
Group_12_0 = Mesh_4.CreateEmptyGroup( SMESH.FACE, 'Group_12_0' )
nbAdd = Group_12_0.Add( [ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ] )
Group_13_0 = Mesh_4.CreateEmptyGroup( SMESH.FACE, 'Group_13_0' )
nbAdd = Group_13_0.Add( [ 35, 36 ] )
Group_10_0 = Mesh_4.CreateEmptyGroup( SMESH.EDGE, 'Group_1' )
nbAdd = Group_10_0.AddFrom( Mesh_4.GetMesh() )
Group_10_0.SetName( 'Group_10_0' )
Number_of_Segments_4.SetNumberOfSegments( 4 )
isDone = Mesh_2.Compute()
[ Group_12_0, Group_13_0, Group_10_0 ] = Mesh_4.GetGroups()
isDone = Mesh_4.Compute()
[ Group_12_0, Group_13_0, Group_10_0 ] = Mesh_4.GetGroups()
Mesh_2.ConvertToQuadratic(0, Mesh_2,True)
[ Group_12_0, Group_13_0, Group_10_0 ] = Mesh_4.GetGroups()
Mesh_5 = smesh.Concatenate([ Mesh_1.GetMesh(), Mesh_2.GetMesh() ], 1, 1, 1e-05,True)
#Group_12_0_1.SetName( 'Group' ) ### not created Object
#Group_12_0_1.SetName( 'Group_12_0' ) ### not created Object
#Group_13_0_1.SetName( 'Group_13_0' ) ### not created Object
[ smeshObj_1, smeshObj_2, Group_12_0_1, smeshObj_3, smeshObj_4, Group_13_0_1 ] = Mesh_5.GetGroups()
Mesh_5.RemoveGroup( smeshObj_3 )
Mesh_5.RemoveGroup( smeshObj_4 )
Mesh_5.RemoveGroup( smeshObj_2 )
isDone = Mesh_2.RemoveElements( [ 7 ] )
isDone = Mesh_1.RemoveElements( [ 7 ] )
isDone = Mesh_2.RemoveElements( [ 8 ] )
isDone = Mesh_1.RemoveElements( [ 5 ] )
isDone = Mesh_2.RemoveElements( [ 7 ] )
isDone = Mesh_1.RemoveElements( [ 6 ] )
[ Group_12_0_1, Group_13_0_1 ] = Mesh_5.GetGroups()
isDone = Mesh_5.RemoveElements( [ 8 ] )
isDone = Mesh_5.RemoveElements( [ 7 ] )
isDone = Mesh_5.RemoveElements( [ 6 ] )
isDone = Mesh_5.RemoveElements( [ 5 ] )
[ Group_12_0_1, Group_13_0_1 ] = Mesh_5.GetGroups()
Group_1_0 = Mesh_5.CreateEmptyGroup( SMESH.EDGE, 'Group_1_0' )
nbAdd = Group_1_0.AddFrom( Mesh_5.GetMesh() )
[ Group_12_0_1, Group_13_0_1, Group_1_0 ] = Mesh_5.GetGroups()
smesh.SetName(Mesh_5, 'Mesh_5')
try:
  Mesh_5.ExportMED(r'/home/gbornia/software/femus/applications/OptimalControl/boundary_control_inequality/dirichlet/dirichlet_lifting_external/input/ext_box_wider.med',auto_groups=0,minor=40,overwrite=1,meshPart=None,autoDimension=0)
  pass
except:
  print('ExportMED() failed. Invalid file name?')
Sub_mesh_1 = Regular_1D.GetSubMesh()
Sub_mesh_2 = Regular_1D_2.GetSubMesh()
Regular_1D_4 = Mesh_1.GetSubMesh( Edge_2, 'Regular_1D' )

## some objects were removed
aStudyBuilder = salome.myStudy.NewBuilder()
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_3))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_1))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_2))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)
SO = salome.myStudy.FindObjectIOR(salome.myStudy.ConvertObjectToIOR(smeshObj_4))
if SO: aStudyBuilder.RemoveObjectWithChildren(SO)

## Set names of Mesh objects
smesh.SetName(Regular_1D_4, 'Regular_1D')
smesh.SetName(Number_of_Segments_4, 'Number of Segments_4')
smesh.SetName(Number_of_Segments_3, 'Number of Segments_3')
smesh.SetName(Number_of_Segments_5, 'Number of Segments_5')
smesh.SetName(Regular_1D.GetAlgorithm(), 'Regular_1D')
smesh.SetName(Quadrangle_2D.GetAlgorithm(), 'Quadrangle_2D')
smesh.SetName(Number_of_Segments_1, 'Number of Segments_1')
smesh.SetName(Sub_mesh_2, 'Sub-mesh_2')
smesh.SetName(Propagation_of_1D_Hyp, 'Propagation of 1D Hyp. on Opposite Edges_1')
smesh.SetName(Number_of_Segments_2, 'Number of Segments_2')
smesh.SetName(Group_12_0, 'Group_12_0')
smesh.SetName(Mesh_4.GetMesh(), 'Mesh_4')
smesh.SetName(Group_13_0, 'Group_13_0')
smesh.SetName(Mesh_5.GetMesh(), 'Mesh_5')
smesh.SetName(Group_10_0, 'Group_10_0')
smesh.SetName(Group_12_0_1, 'Group_12_0')
smesh.SetName(Group_13_0_1, 'Group_13_0')
smesh.SetName(Mesh_1.GetMesh(), 'Mesh_1')
smesh.SetName(Mesh_2.GetMesh(), 'Mesh_2')
smesh.SetName(Group_1_0, 'Group_1_0')
smesh.SetName(Sub_mesh_1, 'Sub-mesh_1')


if salome.sg.hasDesktop():
  salome.sg.updateObjBrowser()
