
CMAKE_MINIMUM_REQUIRED(VERSION 3.15)

get_filename_component(APP_FOLDER_NAME ${CMAKE_CURRENT_LIST_DIR} NAME)

set(THIS_APPLICATION ${APP_FOLDER_NAME_PARENT}_${APP_FOLDER_NAME})

#SET(CMAKE_BUILD_TYPE "debug")

PROJECT(${THIS_APPLICATION})

# set(CMAKE_VERBOSE_MAKEFILE on)

ADD_EXECUTABLE(${THIS_APPLICATION}
${CMAKE_PROJECT_DIR}ex10.cpp 
${CMAKE_PROJECT_DIR}./../../Nitsche/support/eigen.cpp
)


TARGET_LINK_LIBRARIES(${THIS_APPLICATION} femus)
TARGET_LINK_LIBRARIES(${THIS_APPLICATION} ${PETSC_LIBRARIES})
TARGET_LINK_LIBRARIES(${THIS_APPLICATION} b64)
TARGET_LINK_LIBRARIES(${THIS_APPLICATION} jsoncpp)
TARGET_LINK_LIBRARIES(${THIS_APPLICATION} adept)

IF(FPARSER_FOUND)
  TARGET_LINK_LIBRARIES(${THIS_APPLICATION} ${FPARSER_LIBRARY})
ENDIF(FPARSER_FOUND)

IF(MPI_FOUND) 
  TARGET_LINK_LIBRARIES(${THIS_APPLICATION} ${MPI_CXX_LIBRARIES})
  #TARGET_LINK_LIBRARIES(${THIS_APPLICATION} ${MPI_EXTRA_LIBRARY})
ENDIF(MPI_FOUND)

IF(SLEPC_FOUND)
  TARGET_LINK_LIBRARIES(${THIS_APPLICATION}  ${SLEPC_LIBARIES})
  TARGET_LINK_LIBRARIES(${THIS_APPLICATION}  SLEPC::slepc SLEPC::slepc_static)
ENDIF(SLEPC_FOUND)

IF(HDF5_FOUND)
  TARGET_LINK_LIBRARIES(${THIS_APPLICATION} ${HDF5_LIBRARIES})
ENDIF(HDF5_FOUND)

FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/output/)
FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/input/)
FILE(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/save/)
FILE(COPY           ${PROJECT_SOURCE_DIR}/input/ DESTINATION ${PROJECT_BINARY_DIR}/input/)
